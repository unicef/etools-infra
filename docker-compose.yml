version: '3.8'

services:
  proxy:
    image: traefik:v2.4
    container_name: etoolsinfra_proxy
    command:
      - --api.insecure=true
      - --entrypoints.web.address=:80
      - --providers.docker
    ports:
      - "8082:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

#  backend:
#    environment:
#      DEBUG_IP: ${DEBUG_IP:-"10.0.2.2"}
#      DEBUG_PORT: ${DEBUG_PORT:-51312}
#      DATABASE_URL: postgis://etoolusr:@db:5432/etools
#      DJANGO_SETTINGS_MODULE: etools.config.settings.local
#      PYCHARM_DEBUG: 1
#    build:
#      context: ./backend
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-backend:dev
#    container_name: etoolsinfra_backend
#    command: python /code/manage${BACKEND_DEBUG}.py runserver 0.0.0.0:8080
#    labels:
#      traefik.http.routers.backend.rule: PathPrefix(`/`)
#      traefik.http.services.backend.loadBalancer.server.port: 8080
#    volumes:
#      - "./backend:/code"
#    depends_on:
#      - db

  backend:
    environment:
      DATABASE_URL: postgis://etoolusr:@db:5432/etools
      DJANGO_SETTINGS_MODULE: etools.config.settings.local
    container_name: etools_backend
    image: unicef/etools:develop
    command: python /code/manage.py runserver 0.0.0.0:8080
    labels:
      traefik.http.routers.backend.rule: PathPrefix(`/`)
      traefik.http.services.backend.loadBalancer.server.port: 8080
    depends_on:
      - db

  db:
    build:
      context: ./db
      dockerfile: ./Dockerfile
    image: etoolsdev/etools-db:dev
    container_name: etoolsinfra_db
    ports:
      - "65432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust

  pmp:
    container_name: etools_pmp
    image: unicef/etools-pmp:develop
    command: node express.js
    labels:
      traefik.http.routers.pmp.rule: PathPrefix(`/pmp/`)
      traefik.http.services.pmp.loadBalancer.server.port: 8080

#  pmp:
#    build:
#      context: ./pmp
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-pmp:dev
#    container_name: etoolsinfra_pmp
#    labels:
#      traefik.http.routers.pmp.rule: PathPrefix(`/pmp/`)
#      traefik.http.services.pmp.loadBalancer.server.port: 8080
#    volumes:
#      - "./pmp:/code"
#    command: ${FE_COMMAND:-sh -c "polymer serve -H 0.0.0.0 -p 8080"}

  dashboard:
    container_name: etools_dashboard
    image: unicef/etools-dashboard:develop
    command: node express.js
    labels:
      traefik.http.routers.dashboard.rule: PathPrefix(`/dash/`)
      traefik.http.services.dashboard.loadBalancer.server.port: 8080

#  dashboard:
#    build:
#      context: ./dashboard
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-dashboard:dev
#    container_name: etoolsinfra_dashboard
#    labels:
#      traefik.http.routers.dashboard.rule: PathPrefix(`/dash/`)
#      traefik.http.services.dashboard.loadBalancer.server.port: 8080
#      traefik.http.routers.dashboard.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.dashboard-stripprefix.stripprefix.prefixes: /dash
#    volumes:
#      - "./dashboard:/code"
#    command: ${FE_COMMAND:-sh -c "polymer serve -H 0.0.0.0 -p 8080"}

  travel:
    container_name: etools_t2f
    image: unicef/etools-t2f:develop
    command: node express.js
    labels:
      traefik.http.routers.travel.rule: PathPrefix(`/t2f/`)
      traefik.http.services.travel.loadBalancer.server.port: 8080

#  travel:
#    build:
#      context: ./travel
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-travel:dev
#    container_name: etoolsinfra_travel
#    labels:
#      traefik.http.routers.travel.rule: PathPrefix(`/t2f/`)
#      traefik.http.services.travel.loadBalancer.server.port: 8080
#      traefik.http.routers.travel.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.travel-stripprefix.stripprefix.prefixes: /t2f
#    volumes:
#      - "./travel:/code"
#    command: ${FE_COMMAND:-sh -c "polymer serve -H 0.0.0.0 -p 8080"}

  ap:
    container_name: etools_ap
    image: unicef/etools-ap:develop
    command: node express.js
    labels:
      traefik.http.routers.ap.priority: 50
      traefik.http.routers.ap.rule: PathPrefix(`/ap/`)
      traefik.http.services.ap.loadBalancer.server.port: 8080

#  ap:
#    build:
#      context: ./ap
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-ap:dev
#    container_name: etoolsinfra_ap
#    labels:
#      traefik.http.routers.ap.priority: 50
#      traefik.http.routers.ap.rule: PathPrefix(`/ap/`)
#      traefik.http.services.ap.loadBalancer.server.port: 8080
#      traefik.http.routers.ap.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.ap-stripprefix.stripprefix.prefixes: /ap
#    volumes:
#      - "./ap:/code"
#      - "/code/build"
#    command: ${FE_COMMAND:-sh -c "polymer serve -H 0.0.0.0 -p 8080"}

  psea:
    container_name: etools_psea
    image: unicef/etools-psea:develop
    command: node express.js
    labels:
      traefik.http.routers.psea.rule: PathPrefix(`/psea/`)
      traefik.http.services.psea.loadBalancer.server.port: 8080

#  psea:
#    build:
#      context: ./psea
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-psea:dev
#    container_name: etoolsinfra_psea
#    labels:
#      traefik.http.routers.psea.rule: PathPrefix(`/psea/`)
#      traefik.http.services.psea.loadBalancer.server.port: 8080
#      traefik.http.routers.psea.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.psea-stripprefix.stripprefix.prefixes: /psea
#    volumes:
#      - "./psea:/code"
#      - "/code/build"
#    command: ${FE_COMMAND:-sh -c "polymer serve -H 0.0.0.0 -p 8080"}

  tpm:
    container_name: etools_tpm
    image: unicef/etools-tpm:develop
    command: node express.js
    labels:
      traefik.http.routers.tpm.rule: PathPrefix(`/tpm/`)
      traefik.http.services.tpm.loadBalancer.server.port: 8080

#  tpm:
#    build:
#      context: ./tpm
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-tpm:dev
#    container_name: etoolsinfra_tpm
#    labels:
#      traefik.http.routers.tpm.rule: PathPrefix(`/tpm/`)
#      traefik.http.services.tpm.loadBalancer.server.port: 8080
#      traefik.http.routers.tpm.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.tpm-stripprefix.stripprefix.prefixes: /tpm
#    volumes:
#      - "./tpm:/code"
#      - "/code/build"

  apd:
    container_name: etools_apd
    image: unicef/etools-action-points:develop
    labels:
      traefik.http.routers.apd.rule: PathPrefix(`/apd/`)
      traefik.http.services.apd.loadBalancer.server.port: 8080

#  apd:
#    build:
#      context: ./apd
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-action-points:dev
#    container_name: etoolsinfra_apd
#    labels:
#      traefik.http.routers.apd.priority: 40
#      traefik.http.routers.apd.rule: PathPrefix(`/apd/`)
#      traefik.http.services.apd.loadBalancer.server.port: 8080
#      traefik.http.routers.apd.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.apd-stripprefix.stripprefix.prefixes: /apd
#    volumes:
#      - "./apd:/code"
#    command: ${FE_COMMAND:-sh -c "npm run start"}

  fm:
    container_name: etools_fm
    image: unicef/etools-field-monitoring:develop
    command: node express.js
    labels:
      traefik.http.routers.apd.rule: PathPrefix(`/fm/`)
      traefik.http.services.apd.loadBalancer.server.port: 8080

#  fm:
#    build:
#      context: ./fm
#      dockerfile: ./Dockerfile-dev
#    image: etoolsdev/etools-fm:dev
#    container_name: etoolsinfra_fm
#    labels:
#      traefik.http.routers.fm.rule: PathPrefix(`/fm/`)
#      traefik.http.services.fm.loadBalancer.server.port: 8080
#      traefik.http.routers.fm.middlewares: dashboard-stripprefix
#      traefik.http.middlewares.fm-stripprefix.stripprefix.prefixes: /fm
#    volumes:
#      - "./fm:/code"
#    command: ${FE_COMMAND:-sh -c "npm run start"}
